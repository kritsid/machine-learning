# -*- coding: utf-8 -*-
"""linear-regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1twFvSWFXwNLmRb7BIl2DwtL5cAecoRSD
"""

#simple linear regression in python
#step 1:
#importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#step 2:
#import dataset:
from google.colab import files
up=files.upload()

data=pd.read_csv('Salary_Data.csv')

#now choose the prediction set i.e y and features i.e X
#X=data.loc["YearsExperience"]
#it doesnt work as it is used to retrieve data of "years experience" under index_col we have specified ie extracting thesingle row
#y=data.loc["Salary"]
#to make it work, we need to specify either the index col while reading csv or use this:
X=data.iloc[:,:-1]

y=data.iloc[:,1]
print(X)

print(y)

#so now, we have to split our data in training and testing parts.
#generally, 20%of the data available is uesd for testing and 80% for training and making our model
#this is done using sklearn..HERE WE GO:

from sklearn.model_selection import train_test_split
train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)
#random state makes sure that same data in split every time..use any value of it
print(train_X)
print(val_X)
#we can see that we have 30 rows and it has been split as 8 rows in test and 22 in train
#else we can also specify it by using test_size=1/3 ,say;

#next step is to define the model
from sklearn.linear_model import LinearRegression
reg=LinearRegression()
reg.fit(train_X,train_y)
#here, linnear regression is a class amd fit is one of the methods of the class

#time for predictions now!!!!
pred=reg.predict(val_X)
#this will return predicted values of test set of X
pred

print(val_y)

#you can visualize that predicted values are nearer to the actual values.
#to make it easier lets draw some graphs
import seaborn as sns
#plt.figure(figsize=(70,70))

plt.scatter(x=train_X,y=train_y,color='green')
plt.plot(train_X,reg.predict(train_X) ,color='red')
plt.show()

plt.scatter(x=val_X,y=val_y,color='red')
plt.plot(val_X,reg.predict(val_X) ,color='black')
plt.show()